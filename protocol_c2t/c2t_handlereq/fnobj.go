// Code generated by "genprotocol.exe -ver=fc37e02b6858cffd9591410bf9ff4f28fcf1782014d44a7d0e102918f2b1f57d -basedir=protocol_c2t -prefix=c2t -statstype=int"

package c2t_handlereq

import (
	"fmt"

	"github.com/kasworld/goguelike/protocol_c2t/c2t_error"
	"github.com/kasworld/goguelike/protocol_c2t/c2t_idcmd"
	"github.com/kasworld/goguelike/protocol_c2t/c2t_obj"
	"github.com/kasworld/goguelike/protocol_c2t/c2t_packet"
)

// obj base demux fn map
var DemuxReq2ObjAPIFnMap = [...]func(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error){
	c2t_idcmd.Invalid:           Req2ObjAPI_Invalid,           // Invalid make empty packet error
	c2t_idcmd.Login:             Req2ObjAPI_Login,             // Login
	c2t_idcmd.Heartbeat:         Req2ObjAPI_Heartbeat,         // Heartbeat
	c2t_idcmd.Chat:              Req2ObjAPI_Chat,              // Chat
	c2t_idcmd.AchieveInfo:       Req2ObjAPI_AchieveInfo,       // AchieveInfo
	c2t_idcmd.Rebirth:           Req2ObjAPI_Rebirth,           // Rebirth
	c2t_idcmd.MoveFloor:         Req2ObjAPI_MoveFloor,         // MoveFloor tower cmd
	c2t_idcmd.AIPlay:            Req2ObjAPI_AIPlay,            // AIPlay
	c2t_idcmd.VisitFloorList:    Req2ObjAPI_VisitFloorList,    // VisitFloorList floor info of visited
	c2t_idcmd.Meditate:          Req2ObjAPI_Meditate,          // Meditate rest and recover HP,SP
	c2t_idcmd.KillSelf:          Req2ObjAPI_KillSelf,          // KillSelf
	c2t_idcmd.Move:              Req2ObjAPI_Move,              // Move move 8way near tile
	c2t_idcmd.Attack:            Req2ObjAPI_Attack,            // Attack attack near 1 tile
	c2t_idcmd.AttackWide:        Req2ObjAPI_AttackWide,        // AttackWide attack near 3 tile
	c2t_idcmd.AttackLong:        Req2ObjAPI_AttackLong,        // AttackLong attack 3 tile to direction
	c2t_idcmd.Pickup:            Req2ObjAPI_Pickup,            // Pickup pickup carryobj
	c2t_idcmd.Drop:              Req2ObjAPI_Drop,              // Drop drop carryobj
	c2t_idcmd.Equip:             Req2ObjAPI_Equip,             // Equip equip equipable carryobj
	c2t_idcmd.UnEquip:           Req2ObjAPI_UnEquip,           // UnEquip unequip equipable carryobj
	c2t_idcmd.DrinkPotion:       Req2ObjAPI_DrinkPotion,       // DrinkPotion
	c2t_idcmd.ReadScroll:        Req2ObjAPI_ReadScroll,        // ReadScroll
	c2t_idcmd.Recycle:           Req2ObjAPI_Recycle,           // Recycle sell carryobj
	c2t_idcmd.EnterPortal:       Req2ObjAPI_EnterPortal,       // EnterPortal
	c2t_idcmd.ActTeleport:       Req2ObjAPI_ActTeleport,       // ActTeleport
	c2t_idcmd.AdminTowerCmd:     Req2ObjAPI_AdminTowerCmd,     // AdminTowerCmd generic cmd
	c2t_idcmd.AdminFloorCmd:     Req2ObjAPI_AdminFloorCmd,     // AdminFloorCmd generic cmd
	c2t_idcmd.AdminActiveObjCmd: Req2ObjAPI_AdminActiveObjCmd, // AdminActiveObjCmd generic cmd
	c2t_idcmd.AdminFloorMove:    Req2ObjAPI_AdminFloorMove,    // AdminFloorMove Next Before floorUUID
	c2t_idcmd.AdminTeleport:     Req2ObjAPI_AdminTeleport,     // AdminTeleport random pos in floor
	c2t_idcmd.AdminAddExp:       Req2ObjAPI_AdminAddExp,       // AdminAddExp  add arg to battle exp
	c2t_idcmd.AdminPotionEffect: Req2ObjAPI_AdminPotionEffect, // AdminPotionEffect buff by arg potion type
	c2t_idcmd.AdminScrollEffect: Req2ObjAPI_AdminScrollEffect, // AdminScrollEffect buff by arg Scroll type
	c2t_idcmd.AdminCondition:    Req2ObjAPI_AdminCondition,    // AdminCondition add arg condition for 100 turn
	c2t_idcmd.AdminAddPotion:    Req2ObjAPI_AdminAddPotion,    // AdminAddPotion add arg potion to inven
	c2t_idcmd.AdminAddScroll:    Req2ObjAPI_AdminAddScroll,    // AdminAddScroll add arg scroll to inven
	c2t_idcmd.AdminAddMoney:     Req2ObjAPI_AdminAddMoney,     // AdminAddMoney add arg money to inven
	c2t_idcmd.AdminAddEquip:     Req2ObjAPI_AdminAddEquip,     // AdminAddEquip add random equip to inven
	c2t_idcmd.AdminForgetFloor:  Req2ObjAPI_AdminForgetFloor,  // AdminForgetFloor forget current floor map
	c2t_idcmd.AdminFloorMap:     Req2ObjAPI_AdminFloorMap,     // AdminFloorMap complete current floor map

} // DemuxReq2ObjAPIFnMap

// Invalid make empty packet error
func Req2ObjAPI_Invalid(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqInvalid_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqInvalid(me, hd, req)
	return rhd, rsp, err
}

// Invalid make empty packet error
func objAPIFn_ReqInvalid(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqInvalid_data) (
	c2t_packet.Header, *c2t_obj.RspInvalid_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspInvalid_data{}
	return sendHeader, sendBody, nil
}

// Login
func Req2ObjAPI_Login(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqLogin_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqLogin(me, hd, req)
	return rhd, rsp, err
}

// Login
func objAPIFn_ReqLogin(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqLogin_data) (
	c2t_packet.Header, *c2t_obj.RspLogin_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspLogin_data{}
	return sendHeader, sendBody, nil
}

// Heartbeat
func Req2ObjAPI_Heartbeat(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqHeartbeat_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqHeartbeat(me, hd, req)
	return rhd, rsp, err
}

// Heartbeat
func objAPIFn_ReqHeartbeat(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqHeartbeat_data) (
	c2t_packet.Header, *c2t_obj.RspHeartbeat_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspHeartbeat_data{}
	return sendHeader, sendBody, nil
}

// Chat
func Req2ObjAPI_Chat(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqChat_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqChat(me, hd, req)
	return rhd, rsp, err
}

// Chat
func objAPIFn_ReqChat(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqChat_data) (
	c2t_packet.Header, *c2t_obj.RspChat_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspChat_data{}
	return sendHeader, sendBody, nil
}

// AchieveInfo
func Req2ObjAPI_AchieveInfo(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqAchieveInfo_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqAchieveInfo(me, hd, req)
	return rhd, rsp, err
}

// AchieveInfo
func objAPIFn_ReqAchieveInfo(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqAchieveInfo_data) (
	c2t_packet.Header, *c2t_obj.RspAchieveInfo_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAchieveInfo_data{}
	return sendHeader, sendBody, nil
}

// Rebirth
func Req2ObjAPI_Rebirth(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqRebirth_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqRebirth(me, hd, req)
	return rhd, rsp, err
}

// Rebirth
func objAPIFn_ReqRebirth(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqRebirth_data) (
	c2t_packet.Header, *c2t_obj.RspRebirth_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspRebirth_data{}
	return sendHeader, sendBody, nil
}

// MoveFloor tower cmd
func Req2ObjAPI_MoveFloor(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqMoveFloor_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqMoveFloor(me, hd, req)
	return rhd, rsp, err
}

// MoveFloor tower cmd
func objAPIFn_ReqMoveFloor(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqMoveFloor_data) (
	c2t_packet.Header, *c2t_obj.RspMoveFloor_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspMoveFloor_data{}
	return sendHeader, sendBody, nil
}

// AIPlay
func Req2ObjAPI_AIPlay(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqAIPlay_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqAIPlay(me, hd, req)
	return rhd, rsp, err
}

// AIPlay
func objAPIFn_ReqAIPlay(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqAIPlay_data) (
	c2t_packet.Header, *c2t_obj.RspAIPlay_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAIPlay_data{}
	return sendHeader, sendBody, nil
}

// VisitFloorList floor info of visited
func Req2ObjAPI_VisitFloorList(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqVisitFloorList_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqVisitFloorList(me, hd, req)
	return rhd, rsp, err
}

// VisitFloorList floor info of visited
func objAPIFn_ReqVisitFloorList(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqVisitFloorList_data) (
	c2t_packet.Header, *c2t_obj.RspVisitFloorList_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspVisitFloorList_data{}
	return sendHeader, sendBody, nil
}

// Meditate rest and recover HP,SP
func Req2ObjAPI_Meditate(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqMeditate_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqMeditate(me, hd, req)
	return rhd, rsp, err
}

// Meditate rest and recover HP,SP
func objAPIFn_ReqMeditate(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqMeditate_data) (
	c2t_packet.Header, *c2t_obj.RspMeditate_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspMeditate_data{}
	return sendHeader, sendBody, nil
}

// KillSelf
func Req2ObjAPI_KillSelf(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqKillSelf_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqKillSelf(me, hd, req)
	return rhd, rsp, err
}

// KillSelf
func objAPIFn_ReqKillSelf(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqKillSelf_data) (
	c2t_packet.Header, *c2t_obj.RspKillSelf_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspKillSelf_data{}
	return sendHeader, sendBody, nil
}

// Move move 8way near tile
func Req2ObjAPI_Move(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqMove_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqMove(me, hd, req)
	return rhd, rsp, err
}

// Move move 8way near tile
func objAPIFn_ReqMove(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqMove_data) (
	c2t_packet.Header, *c2t_obj.RspMove_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspMove_data{}
	return sendHeader, sendBody, nil
}

// Attack attack near 1 tile
func Req2ObjAPI_Attack(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqAttack_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqAttack(me, hd, req)
	return rhd, rsp, err
}

// Attack attack near 1 tile
func objAPIFn_ReqAttack(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqAttack_data) (
	c2t_packet.Header, *c2t_obj.RspAttack_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAttack_data{}
	return sendHeader, sendBody, nil
}

// AttackWide attack near 3 tile
func Req2ObjAPI_AttackWide(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqAttackWide_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqAttackWide(me, hd, req)
	return rhd, rsp, err
}

// AttackWide attack near 3 tile
func objAPIFn_ReqAttackWide(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqAttackWide_data) (
	c2t_packet.Header, *c2t_obj.RspAttackWide_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAttackWide_data{}
	return sendHeader, sendBody, nil
}

// AttackLong attack 3 tile to direction
func Req2ObjAPI_AttackLong(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqAttackLong_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqAttackLong(me, hd, req)
	return rhd, rsp, err
}

// AttackLong attack 3 tile to direction
func objAPIFn_ReqAttackLong(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqAttackLong_data) (
	c2t_packet.Header, *c2t_obj.RspAttackLong_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAttackLong_data{}
	return sendHeader, sendBody, nil
}

// Pickup pickup carryobj
func Req2ObjAPI_Pickup(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqPickup_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqPickup(me, hd, req)
	return rhd, rsp, err
}

// Pickup pickup carryobj
func objAPIFn_ReqPickup(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqPickup_data) (
	c2t_packet.Header, *c2t_obj.RspPickup_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspPickup_data{}
	return sendHeader, sendBody, nil
}

// Drop drop carryobj
func Req2ObjAPI_Drop(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqDrop_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqDrop(me, hd, req)
	return rhd, rsp, err
}

// Drop drop carryobj
func objAPIFn_ReqDrop(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqDrop_data) (
	c2t_packet.Header, *c2t_obj.RspDrop_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspDrop_data{}
	return sendHeader, sendBody, nil
}

// Equip equip equipable carryobj
func Req2ObjAPI_Equip(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqEquip_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqEquip(me, hd, req)
	return rhd, rsp, err
}

// Equip equip equipable carryobj
func objAPIFn_ReqEquip(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqEquip_data) (
	c2t_packet.Header, *c2t_obj.RspEquip_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspEquip_data{}
	return sendHeader, sendBody, nil
}

// UnEquip unequip equipable carryobj
func Req2ObjAPI_UnEquip(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqUnEquip_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqUnEquip(me, hd, req)
	return rhd, rsp, err
}

// UnEquip unequip equipable carryobj
func objAPIFn_ReqUnEquip(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqUnEquip_data) (
	c2t_packet.Header, *c2t_obj.RspUnEquip_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspUnEquip_data{}
	return sendHeader, sendBody, nil
}

// DrinkPotion
func Req2ObjAPI_DrinkPotion(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqDrinkPotion_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqDrinkPotion(me, hd, req)
	return rhd, rsp, err
}

// DrinkPotion
func objAPIFn_ReqDrinkPotion(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqDrinkPotion_data) (
	c2t_packet.Header, *c2t_obj.RspDrinkPotion_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspDrinkPotion_data{}
	return sendHeader, sendBody, nil
}

// ReadScroll
func Req2ObjAPI_ReadScroll(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqReadScroll_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqReadScroll(me, hd, req)
	return rhd, rsp, err
}

// ReadScroll
func objAPIFn_ReqReadScroll(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqReadScroll_data) (
	c2t_packet.Header, *c2t_obj.RspReadScroll_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspReadScroll_data{}
	return sendHeader, sendBody, nil
}

// Recycle sell carryobj
func Req2ObjAPI_Recycle(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqRecycle_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqRecycle(me, hd, req)
	return rhd, rsp, err
}

// Recycle sell carryobj
func objAPIFn_ReqRecycle(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqRecycle_data) (
	c2t_packet.Header, *c2t_obj.RspRecycle_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspRecycle_data{}
	return sendHeader, sendBody, nil
}

// EnterPortal
func Req2ObjAPI_EnterPortal(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqEnterPortal_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqEnterPortal(me, hd, req)
	return rhd, rsp, err
}

// EnterPortal
func objAPIFn_ReqEnterPortal(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqEnterPortal_data) (
	c2t_packet.Header, *c2t_obj.RspEnterPortal_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspEnterPortal_data{}
	return sendHeader, sendBody, nil
}

// ActTeleport
func Req2ObjAPI_ActTeleport(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqActTeleport_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqActTeleport(me, hd, req)
	return rhd, rsp, err
}

// ActTeleport
func objAPIFn_ReqActTeleport(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqActTeleport_data) (
	c2t_packet.Header, *c2t_obj.RspActTeleport_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspActTeleport_data{}
	return sendHeader, sendBody, nil
}

// AdminTowerCmd generic cmd
func Req2ObjAPI_AdminTowerCmd(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqAdminTowerCmd_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqAdminTowerCmd(me, hd, req)
	return rhd, rsp, err
}

// AdminTowerCmd generic cmd
func objAPIFn_ReqAdminTowerCmd(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqAdminTowerCmd_data) (
	c2t_packet.Header, *c2t_obj.RspAdminTowerCmd_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminTowerCmd_data{}
	return sendHeader, sendBody, nil
}

// AdminFloorCmd generic cmd
func Req2ObjAPI_AdminFloorCmd(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqAdminFloorCmd_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqAdminFloorCmd(me, hd, req)
	return rhd, rsp, err
}

// AdminFloorCmd generic cmd
func objAPIFn_ReqAdminFloorCmd(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqAdminFloorCmd_data) (
	c2t_packet.Header, *c2t_obj.RspAdminFloorCmd_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminFloorCmd_data{}
	return sendHeader, sendBody, nil
}

// AdminActiveObjCmd generic cmd
func Req2ObjAPI_AdminActiveObjCmd(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqAdminActiveObjCmd_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqAdminActiveObjCmd(me, hd, req)
	return rhd, rsp, err
}

// AdminActiveObjCmd generic cmd
func objAPIFn_ReqAdminActiveObjCmd(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqAdminActiveObjCmd_data) (
	c2t_packet.Header, *c2t_obj.RspAdminActiveObjCmd_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminActiveObjCmd_data{}
	return sendHeader, sendBody, nil
}

// AdminFloorMove Next Before floorUUID
func Req2ObjAPI_AdminFloorMove(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqAdminFloorMove_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqAdminFloorMove(me, hd, req)
	return rhd, rsp, err
}

// AdminFloorMove Next Before floorUUID
func objAPIFn_ReqAdminFloorMove(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqAdminFloorMove_data) (
	c2t_packet.Header, *c2t_obj.RspAdminFloorMove_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminFloorMove_data{}
	return sendHeader, sendBody, nil
}

// AdminTeleport random pos in floor
func Req2ObjAPI_AdminTeleport(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqAdminTeleport_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqAdminTeleport(me, hd, req)
	return rhd, rsp, err
}

// AdminTeleport random pos in floor
func objAPIFn_ReqAdminTeleport(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqAdminTeleport_data) (
	c2t_packet.Header, *c2t_obj.RspAdminTeleport_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminTeleport_data{}
	return sendHeader, sendBody, nil
}

// AdminAddExp  add arg to battle exp
func Req2ObjAPI_AdminAddExp(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqAdminAddExp_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqAdminAddExp(me, hd, req)
	return rhd, rsp, err
}

// AdminAddExp  add arg to battle exp
func objAPIFn_ReqAdminAddExp(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqAdminAddExp_data) (
	c2t_packet.Header, *c2t_obj.RspAdminAddExp_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminAddExp_data{}
	return sendHeader, sendBody, nil
}

// AdminPotionEffect buff by arg potion type
func Req2ObjAPI_AdminPotionEffect(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqAdminPotionEffect_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqAdminPotionEffect(me, hd, req)
	return rhd, rsp, err
}

// AdminPotionEffect buff by arg potion type
func objAPIFn_ReqAdminPotionEffect(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqAdminPotionEffect_data) (
	c2t_packet.Header, *c2t_obj.RspAdminPotionEffect_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminPotionEffect_data{}
	return sendHeader, sendBody, nil
}

// AdminScrollEffect buff by arg Scroll type
func Req2ObjAPI_AdminScrollEffect(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqAdminScrollEffect_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqAdminScrollEffect(me, hd, req)
	return rhd, rsp, err
}

// AdminScrollEffect buff by arg Scroll type
func objAPIFn_ReqAdminScrollEffect(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqAdminScrollEffect_data) (
	c2t_packet.Header, *c2t_obj.RspAdminScrollEffect_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminScrollEffect_data{}
	return sendHeader, sendBody, nil
}

// AdminCondition add arg condition for 100 turn
func Req2ObjAPI_AdminCondition(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqAdminCondition_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqAdminCondition(me, hd, req)
	return rhd, rsp, err
}

// AdminCondition add arg condition for 100 turn
func objAPIFn_ReqAdminCondition(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqAdminCondition_data) (
	c2t_packet.Header, *c2t_obj.RspAdminCondition_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminCondition_data{}
	return sendHeader, sendBody, nil
}

// AdminAddPotion add arg potion to inven
func Req2ObjAPI_AdminAddPotion(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqAdminAddPotion_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqAdminAddPotion(me, hd, req)
	return rhd, rsp, err
}

// AdminAddPotion add arg potion to inven
func objAPIFn_ReqAdminAddPotion(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqAdminAddPotion_data) (
	c2t_packet.Header, *c2t_obj.RspAdminAddPotion_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminAddPotion_data{}
	return sendHeader, sendBody, nil
}

// AdminAddScroll add arg scroll to inven
func Req2ObjAPI_AdminAddScroll(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqAdminAddScroll_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqAdminAddScroll(me, hd, req)
	return rhd, rsp, err
}

// AdminAddScroll add arg scroll to inven
func objAPIFn_ReqAdminAddScroll(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqAdminAddScroll_data) (
	c2t_packet.Header, *c2t_obj.RspAdminAddScroll_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminAddScroll_data{}
	return sendHeader, sendBody, nil
}

// AdminAddMoney add arg money to inven
func Req2ObjAPI_AdminAddMoney(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqAdminAddMoney_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqAdminAddMoney(me, hd, req)
	return rhd, rsp, err
}

// AdminAddMoney add arg money to inven
func objAPIFn_ReqAdminAddMoney(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqAdminAddMoney_data) (
	c2t_packet.Header, *c2t_obj.RspAdminAddMoney_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminAddMoney_data{}
	return sendHeader, sendBody, nil
}

// AdminAddEquip add random equip to inven
func Req2ObjAPI_AdminAddEquip(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqAdminAddEquip_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqAdminAddEquip(me, hd, req)
	return rhd, rsp, err
}

// AdminAddEquip add random equip to inven
func objAPIFn_ReqAdminAddEquip(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqAdminAddEquip_data) (
	c2t_packet.Header, *c2t_obj.RspAdminAddEquip_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminAddEquip_data{}
	return sendHeader, sendBody, nil
}

// AdminForgetFloor forget current floor map
func Req2ObjAPI_AdminForgetFloor(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqAdminForgetFloor_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqAdminForgetFloor(me, hd, req)
	return rhd, rsp, err
}

// AdminForgetFloor forget current floor map
func objAPIFn_ReqAdminForgetFloor(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqAdminForgetFloor_data) (
	c2t_packet.Header, *c2t_obj.RspAdminForgetFloor_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminForgetFloor_data{}
	return sendHeader, sendBody, nil
}

// AdminFloorMap complete current floor map
func Req2ObjAPI_AdminFloorMap(
	me interface{}, hd c2t_packet.Header, robj interface{}) (
	c2t_packet.Header, interface{}, error) {
	req, ok := robj.(*c2t_obj.ReqAdminFloorMap_data)
	if !ok {
		return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	}
	rhd, rsp, err := objAPIFn_ReqAdminFloorMap(me, hd, req)
	return rhd, rsp, err
}

// AdminFloorMap complete current floor map
func objAPIFn_ReqAdminFloorMap(
	me interface{}, hd c2t_packet.Header, robj *c2t_obj.ReqAdminFloorMap_data) (
	c2t_packet.Header, *c2t_obj.RspAdminFloorMap_data, error) {
	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminFloorMap_data{}
	return sendHeader, sendBody, nil
}
