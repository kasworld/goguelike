// Code generated by "genprotocol.exe -ver=fc37e02b6858cffd9591410bf9ff4f28fcf1782014d44a7d0e102918f2b1f57d -basedir=protocol_c2t -prefix=c2t -statstype=int"

package c2t_handlereq

import (
	"github.com/kasworld/goguelike/protocol_c2t/c2t_error"
	"github.com/kasworld/goguelike/protocol_c2t/c2t_idcmd"
	"github.com/kasworld/goguelike/protocol_c2t/c2t_obj"
	"github.com/kasworld/goguelike/protocol_c2t/c2t_packet"
)

// bytes base fn map api, unmarshal in api
var DemuxReq2BytesAPIFnMap = [...]func(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error){
	c2t_idcmd.Invalid:           bytesAPIFn_ReqInvalid,           // Invalid make empty packet error
	c2t_idcmd.Login:             bytesAPIFn_ReqLogin,             // Login
	c2t_idcmd.Heartbeat:         bytesAPIFn_ReqHeartbeat,         // Heartbeat
	c2t_idcmd.Chat:              bytesAPIFn_ReqChat,              // Chat
	c2t_idcmd.AchieveInfo:       bytesAPIFn_ReqAchieveInfo,       // AchieveInfo
	c2t_idcmd.Rebirth:           bytesAPIFn_ReqRebirth,           // Rebirth
	c2t_idcmd.MoveFloor:         bytesAPIFn_ReqMoveFloor,         // MoveFloor tower cmd
	c2t_idcmd.AIPlay:            bytesAPIFn_ReqAIPlay,            // AIPlay
	c2t_idcmd.VisitFloorList:    bytesAPIFn_ReqVisitFloorList,    // VisitFloorList floor info of visited
	c2t_idcmd.Meditate:          bytesAPIFn_ReqMeditate,          // Meditate rest and recover HP,SP
	c2t_idcmd.KillSelf:          bytesAPIFn_ReqKillSelf,          // KillSelf
	c2t_idcmd.Move:              bytesAPIFn_ReqMove,              // Move move 8way near tile
	c2t_idcmd.Attack:            bytesAPIFn_ReqAttack,            // Attack attack near 1 tile
	c2t_idcmd.AttackWide:        bytesAPIFn_ReqAttackWide,        // AttackWide attack near 3 tile
	c2t_idcmd.AttackLong:        bytesAPIFn_ReqAttackLong,        // AttackLong attack 3 tile to direction
	c2t_idcmd.Pickup:            bytesAPIFn_ReqPickup,            // Pickup pickup carryobj
	c2t_idcmd.Drop:              bytesAPIFn_ReqDrop,              // Drop drop carryobj
	c2t_idcmd.Equip:             bytesAPIFn_ReqEquip,             // Equip equip equipable carryobj
	c2t_idcmd.UnEquip:           bytesAPIFn_ReqUnEquip,           // UnEquip unequip equipable carryobj
	c2t_idcmd.DrinkPotion:       bytesAPIFn_ReqDrinkPotion,       // DrinkPotion
	c2t_idcmd.ReadScroll:        bytesAPIFn_ReqReadScroll,        // ReadScroll
	c2t_idcmd.Recycle:           bytesAPIFn_ReqRecycle,           // Recycle sell carryobj
	c2t_idcmd.EnterPortal:       bytesAPIFn_ReqEnterPortal,       // EnterPortal
	c2t_idcmd.ActTeleport:       bytesAPIFn_ReqActTeleport,       // ActTeleport
	c2t_idcmd.AdminTowerCmd:     bytesAPIFn_ReqAdminTowerCmd,     // AdminTowerCmd generic cmd
	c2t_idcmd.AdminFloorCmd:     bytesAPIFn_ReqAdminFloorCmd,     // AdminFloorCmd generic cmd
	c2t_idcmd.AdminActiveObjCmd: bytesAPIFn_ReqAdminActiveObjCmd, // AdminActiveObjCmd generic cmd
	c2t_idcmd.AdminFloorMove:    bytesAPIFn_ReqAdminFloorMove,    // AdminFloorMove Next Before floorUUID
	c2t_idcmd.AdminTeleport:     bytesAPIFn_ReqAdminTeleport,     // AdminTeleport random pos in floor
	c2t_idcmd.AdminAddExp:       bytesAPIFn_ReqAdminAddExp,       // AdminAddExp  add arg to battle exp
	c2t_idcmd.AdminPotionEffect: bytesAPIFn_ReqAdminPotionEffect, // AdminPotionEffect buff by arg potion type
	c2t_idcmd.AdminScrollEffect: bytesAPIFn_ReqAdminScrollEffect, // AdminScrollEffect buff by arg Scroll type
	c2t_idcmd.AdminCondition:    bytesAPIFn_ReqAdminCondition,    // AdminCondition add arg condition for 100 turn
	c2t_idcmd.AdminAddPotion:    bytesAPIFn_ReqAdminAddPotion,    // AdminAddPotion add arg potion to inven
	c2t_idcmd.AdminAddScroll:    bytesAPIFn_ReqAdminAddScroll,    // AdminAddScroll add arg scroll to inven
	c2t_idcmd.AdminAddMoney:     bytesAPIFn_ReqAdminAddMoney,     // AdminAddMoney add arg money to inven
	c2t_idcmd.AdminAddEquip:     bytesAPIFn_ReqAdminAddEquip,     // AdminAddEquip add random equip to inven
	c2t_idcmd.AdminForgetFloor:  bytesAPIFn_ReqAdminForgetFloor,  // AdminForgetFloor forget current floor map
	c2t_idcmd.AdminFloorMap:     bytesAPIFn_ReqAdminFloorMap,     // AdminFloorMap complete current floor map

} // DemuxReq2BytesAPIFnMap

// Invalid make empty packet error
func bytesAPIFn_ReqInvalid(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqInvalid_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspInvalid_data{}
	return sendHeader, sendBody, nil
}

// Login
func bytesAPIFn_ReqLogin(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqLogin_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspLogin_data{}
	return sendHeader, sendBody, nil
}

// Heartbeat
func bytesAPIFn_ReqHeartbeat(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqHeartbeat_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspHeartbeat_data{}
	return sendHeader, sendBody, nil
}

// Chat
func bytesAPIFn_ReqChat(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqChat_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspChat_data{}
	return sendHeader, sendBody, nil
}

// AchieveInfo
func bytesAPIFn_ReqAchieveInfo(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqAchieveInfo_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAchieveInfo_data{}
	return sendHeader, sendBody, nil
}

// Rebirth
func bytesAPIFn_ReqRebirth(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqRebirth_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspRebirth_data{}
	return sendHeader, sendBody, nil
}

// MoveFloor tower cmd
func bytesAPIFn_ReqMoveFloor(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqMoveFloor_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspMoveFloor_data{}
	return sendHeader, sendBody, nil
}

// AIPlay
func bytesAPIFn_ReqAIPlay(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqAIPlay_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAIPlay_data{}
	return sendHeader, sendBody, nil
}

// VisitFloorList floor info of visited
func bytesAPIFn_ReqVisitFloorList(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqVisitFloorList_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspVisitFloorList_data{}
	return sendHeader, sendBody, nil
}

// Meditate rest and recover HP,SP
func bytesAPIFn_ReqMeditate(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqMeditate_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspMeditate_data{}
	return sendHeader, sendBody, nil
}

// KillSelf
func bytesAPIFn_ReqKillSelf(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqKillSelf_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspKillSelf_data{}
	return sendHeader, sendBody, nil
}

// Move move 8way near tile
func bytesAPIFn_ReqMove(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqMove_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspMove_data{}
	return sendHeader, sendBody, nil
}

// Attack attack near 1 tile
func bytesAPIFn_ReqAttack(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqAttack_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAttack_data{}
	return sendHeader, sendBody, nil
}

// AttackWide attack near 3 tile
func bytesAPIFn_ReqAttackWide(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqAttackWide_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAttackWide_data{}
	return sendHeader, sendBody, nil
}

// AttackLong attack 3 tile to direction
func bytesAPIFn_ReqAttackLong(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqAttackLong_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAttackLong_data{}
	return sendHeader, sendBody, nil
}

// Pickup pickup carryobj
func bytesAPIFn_ReqPickup(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqPickup_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspPickup_data{}
	return sendHeader, sendBody, nil
}

// Drop drop carryobj
func bytesAPIFn_ReqDrop(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqDrop_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspDrop_data{}
	return sendHeader, sendBody, nil
}

// Equip equip equipable carryobj
func bytesAPIFn_ReqEquip(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqEquip_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspEquip_data{}
	return sendHeader, sendBody, nil
}

// UnEquip unequip equipable carryobj
func bytesAPIFn_ReqUnEquip(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqUnEquip_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspUnEquip_data{}
	return sendHeader, sendBody, nil
}

// DrinkPotion
func bytesAPIFn_ReqDrinkPotion(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqDrinkPotion_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspDrinkPotion_data{}
	return sendHeader, sendBody, nil
}

// ReadScroll
func bytesAPIFn_ReqReadScroll(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqReadScroll_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspReadScroll_data{}
	return sendHeader, sendBody, nil
}

// Recycle sell carryobj
func bytesAPIFn_ReqRecycle(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqRecycle_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspRecycle_data{}
	return sendHeader, sendBody, nil
}

// EnterPortal
func bytesAPIFn_ReqEnterPortal(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqEnterPortal_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspEnterPortal_data{}
	return sendHeader, sendBody, nil
}

// ActTeleport
func bytesAPIFn_ReqActTeleport(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqActTeleport_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspActTeleport_data{}
	return sendHeader, sendBody, nil
}

// AdminTowerCmd generic cmd
func bytesAPIFn_ReqAdminTowerCmd(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqAdminTowerCmd_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminTowerCmd_data{}
	return sendHeader, sendBody, nil
}

// AdminFloorCmd generic cmd
func bytesAPIFn_ReqAdminFloorCmd(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqAdminFloorCmd_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminFloorCmd_data{}
	return sendHeader, sendBody, nil
}

// AdminActiveObjCmd generic cmd
func bytesAPIFn_ReqAdminActiveObjCmd(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqAdminActiveObjCmd_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminActiveObjCmd_data{}
	return sendHeader, sendBody, nil
}

// AdminFloorMove Next Before floorUUID
func bytesAPIFn_ReqAdminFloorMove(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqAdminFloorMove_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminFloorMove_data{}
	return sendHeader, sendBody, nil
}

// AdminTeleport random pos in floor
func bytesAPIFn_ReqAdminTeleport(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqAdminTeleport_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminTeleport_data{}
	return sendHeader, sendBody, nil
}

// AdminAddExp  add arg to battle exp
func bytesAPIFn_ReqAdminAddExp(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqAdminAddExp_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminAddExp_data{}
	return sendHeader, sendBody, nil
}

// AdminPotionEffect buff by arg potion type
func bytesAPIFn_ReqAdminPotionEffect(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqAdminPotionEffect_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminPotionEffect_data{}
	return sendHeader, sendBody, nil
}

// AdminScrollEffect buff by arg Scroll type
func bytesAPIFn_ReqAdminScrollEffect(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqAdminScrollEffect_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminScrollEffect_data{}
	return sendHeader, sendBody, nil
}

// AdminCondition add arg condition for 100 turn
func bytesAPIFn_ReqAdminCondition(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqAdminCondition_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminCondition_data{}
	return sendHeader, sendBody, nil
}

// AdminAddPotion add arg potion to inven
func bytesAPIFn_ReqAdminAddPotion(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqAdminAddPotion_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminAddPotion_data{}
	return sendHeader, sendBody, nil
}

// AdminAddScroll add arg scroll to inven
func bytesAPIFn_ReqAdminAddScroll(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqAdminAddScroll_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminAddScroll_data{}
	return sendHeader, sendBody, nil
}

// AdminAddMoney add arg money to inven
func bytesAPIFn_ReqAdminAddMoney(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqAdminAddMoney_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminAddMoney_data{}
	return sendHeader, sendBody, nil
}

// AdminAddEquip add random equip to inven
func bytesAPIFn_ReqAdminAddEquip(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqAdminAddEquip_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminAddEquip_data{}
	return sendHeader, sendBody, nil
}

// AdminForgetFloor forget current floor map
func bytesAPIFn_ReqAdminForgetFloor(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqAdminForgetFloor_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminForgetFloor_data{}
	return sendHeader, sendBody, nil
}

// AdminFloorMap complete current floor map
func bytesAPIFn_ReqAdminFloorMap(
	me interface{}, hd c2t_packet.Header, rbody []byte) (
	c2t_packet.Header, interface{}, error) {
	// robj, err := c2t_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*c2t_obj.ReqAdminFloorMap_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := c2t_packet.Header{
		ErrorCode: c2t_error.None,
	}
	sendBody := &c2t_obj.RspAdminFloorMap_data{}
	return sendHeader, sendBody, nil
}
